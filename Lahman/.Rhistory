Data$park[Data$park=="Oakland Coliseum" | Data$park=="Network Associates Coliseum"] = "McAfee Coliseum"
Data$park[Data$park=="Skydome"] = "Rogers Centre"
Data$park[Data$park=="PacBell Park" | Data$park =="SBC Park"]="AT&T Park"
Data$park[Data$park=="Stade Olympique/Hiram Bithorn Stadium"]="Stade Olympique"
Data$park[Data$park=="Comiskey Park II"]="U.S. Cellular Field"
Data = Data[-which(Data$POS=="P"),]
Parks = levels(factor(Data$park) )
Data$park = factor(Data$park)
Data$POS = factor(Data$POS, levels=c("C", "1B", "2B", "3B", "SS", "LF", "CF", "RF", "DH","OF","IF","P"))
Players = unique(Data$playerID)
Data_Online = Data[Data$yearID>=1990,]
Parks_Online = levels(factor(Data_Online$park))
Players_Online = unique(Data_Online$playerID)
Data_Train = Data[Data$yearID<=1989,]
Parks_Train = levels(factor(Data_Train$park))
Players_Train = unique(Data_Train$playerID)
write.csv(file="DLM_data.csv", Data_Online, row.names=F)
write.csv(file="DLM_Prior_data.csv", Data_Train, row.names=F)
write.csv(file="Parks.csv", Parks_Online, row.names=F)
write.csv(file="Players.csv",Players_Online,row.names=F)
write.csv(file="Parks_Prior.csv", Parks_Train, row.names=F)
write.csv(file="Players_Prior.csv",Players_Train,row.names=F)
warnings()
##Creating the list for Player Alignment.
## There seem to be players who have two different records for the same year with the same team and park.
## I can't quite say which this is, but there should only be one.  I need to add some pre-processing to handle that.
#(yearID, playerID, teamID and park are the same for all players, then consolidate records.)
rm(list=ls())
library(MASS)
library(Matrix)
library(xlsx)
Data = read.csv("~/Dropbox/Baseball/Lahman/DLM_data.csv", header=T,stringsAsFactor=F)
Jensen_118 = read.xlsx("~/Dropbox/Baseball/Lahman/Jensen_118.xlsx", sheetIndex=1)
Jensen_118 = as.character(Jensen_118[,1])
#This eliminates the second team that a player plays for and the players who have more than one entry per year for a single team
Data = Data[!duplicated(Data[,c("playerID","yearID")]) & !duplicated(Data[,c("playerID","yearID","teamID")]),]
Data = Data[!is.na(Data$Age),]
AB_thresh = 40
Year_thresh = 2005
Parks = unique(Data$park)
nParks = length(Parks)
Positions = c("C","1B","2B","3B","SS","LF","CF","RF","DH")
Age.Range = range(Data$Age)
Age.length = Age.Range[2]-Age.Range[1]+1
Age.Alignment = list()
mat = matrix()
for(i in 1:Age.length){
age = Age.Range[1]-1 + i
players = Data$playerID[Data$Age==age & Data$AB>AB_thresh & Data$yearID<=Year_thresh ]
if(length(players) == 0){
Age.Alignment[[i]] = NULL
next
}
Age.Player = list()
for (j in 1:length(players)){
Player.Prototype = list(Year = NA, Response = list(AB = mat, HR =mat), Predictors = list(F_Park = mat, F_Pos = mat) )
F_Park = rep(0,nParks)
F_Park[which(Parks==Data$park[Data$Age==age & Data$playerID==players[j] ] ) ]=1
F_Pos = rep(0,9)
F_Pos[which(Positions==Data$POS[Data$Age==age & Data$playerID==players[j] ] ) ]=1
Player.Prototype$Year = Data$yearID[Data$Age==age & Data$playerID==players[j] ]
Player.Prototype$Response$AB = Data$AB[Data$Age==age & Data$playerID==players[j] ]
Player.Prototype$Response$HR = Data$HR[Data$Age==age & Data$playerID==players[j] ]
Player.Prototype$Predictors$F_Park = F_Park
Player.Prototype$Predictors$F_Pos = F_Pos
#Player.Prototype$Predictors$Salary = Data$salary.adj[Data$Age == age & Data$playerID==players[j] ]
Age.Player[[j]] = list()
Age.Player[[j]] = Player.Prototype
}
names(Age.Player)=players
Age.Alignment[[i]] = Age.Player
}
save(file = "~/DGLM/Data/AgeAlignment2005.RData", Age.Alignment)
rm(list=ls())
#source("~/Dropbox/Surya_Group/Baseball/Simulation_Study/DLM_functions.R")
#source("~/Dropbox/Surya_Group/Baseball/Simulation_Study/DLM_FFBS.R")
source("~/DGLM/Code/Q_Age.R")
source("~/DGLM/Code/Q_PED.R")
#load("~/DGLM/Data/AgeAlignmentSmall.RData")
load("~/DGLM/Data/AgeAlignment2005.RData")
t.T = length(Age.Alignment)
Age = 18+(1:t.T)
n = rep(NA,t.T)
for(t in 1:t.T) n[t] = length(Age.Alignment[[t]])
t.min = min(which(n>=10)) #50
t.max = max(which(n>=10)) #50
Age = Age[t.min:t.max]
print(Age)
t.T = length(t.min:t.max)
print(t.T)
y = N = list()
for(t in 1:t.T){
tt = t.min + t-1
y[[t]] = sapply(1:n[tt], function(i) Age.Alignment[[tt]][[i]]$Response$HR )
N[[t]] = sapply(1:n[tt], function(i) Age.Alignment[[tt]][[i]]$Response$AB )
names(y[[t]]) = names(N[[t]]) = names(Age.Alignment[[tt]])
}
n = n[t.min:t.max]
alpha = 5
decay.rate = 2
PI.Z.0 = matrix(c(1,0), nrow = 1)
stickiness_zeta = 2/3 #8/9  # 8 players out of every 9 stay steroid users.
rho = 1/50  #1/36           # 1 player out of every 36 becomes a steroid user
Q.zeta = Q.PED(stickiness_zeta,rho)
K = 15
m0 = seq(from = -4.5, to = -2.25, len = K)
PI.0 = 1/(1+exp(-m0))
m0.PED = .4
sigma2.PED = .001
m0 = matrix(c(m0, m0.PED), ncol = 1)
beta = 2/10 #1/100
sigma2 = rep(NA,K+1)
for(k in 1:K){
delta.m = (m0[k+1]-m0[k])
if(k==K) delta.m =(m0[k]-m0[k-1])
sigma2[k] = -delta.m^2/(8*log(beta))
}
sigma2[K+1] = sigma2.PED
C0 = sigma2*diag(K+1)
#print(sigma2)
W = .5*C0 #.5*C0 works well.
#print(W)
#PI.G.0 = c(1, rep(0,K-1))
PI.G.0 = rep(NA,K)
#PI.G.0 = c(1,rep(0,K-1))
k.0 = 7
for(k in 1:K) PI.G.0[k] = exp(-1/(2*6)*(k.0-k)^2)
PI.G.0 = PI.G.0 / sum(PI.G.0)
load("~/DGLM/Data/Gamma_Zeta_marginal_time.RData")
PI.G_Z.0 = PI.G_Z.0[is.element(rownames(PI.G_Z.0),as.character(Age)),]
Q.gamma = Q.gamma_zeta = list()
for(t in 1:t.T){
Q.gamma[[t]] = Q.age(Age[t],alpha=alpha,decay.rate = decay.rate, K, m0[1:K])
Q.gamma_zeta[[t]] = matrix(nrow = 2*K, ncol = 2*K)
Q.gamma_zeta[[t]][1:K,1:K] = Q.gamma[[t]]*Q.zeta[1,1]
Q.gamma_zeta[[t]][1:K,(K+1):(2*K)] = Q.gamma[[t]]*Q.zeta[1,2]
Q.gamma_zeta[[t]][(K+1):(2*K),1:K] = Q.gamma[[t]]*Q.zeta[2,1]
Q.gamma_zeta[[t]][(K+1):(2*K),(K+1):(2*K)] = Q.gamma[[t]]*Q.zeta[2,2]
}
#save(file = "~/DGLM/Data/Q_Matrices.RData", Q.gamma, Q.zeta)
#print(PI.G_Z.0)
apply(PI.G_Z.0,1,sum)
save(file = "~/DGLM/Data/Raw_Data.RData",t.T,n,Age,K,Q.gamma_zeta,Q.gamma,Q.zeta,PI.G_Z.0,PI.G.0,PI.Z.0,y,N,m0,C0,W)
#save(file = "~/DGLM/Data/Raw_Data_Prediction.RData",t.T,n,Age,K,Q.gamma_zeta,Q.gamma,Q.zeta,PI.G_Z.0,PI.G.0,PI.Z.0,y,N,m0,C0,W)
5816/7200
5816/3600
#First get all of the relevant players active in 2005.
#Check the alignment to make sure that all is proper.
rm(list=ls())
load("~/DGLM/Data/AgeAlignment2005.RData")
load("~/DGLM/Data/Raw_Data.RData")
library(ggplot2)
t.T = length(Age.Alignment)
Age = 18+(1:t.T)
K = 15
B = 0
N.MC = 10
sigma2 = diag(W)
n = rep(NA,t.T)
for(t in 1:t.T) n[t] = length(Age.Alignment[[t]])
t.min = min(which(n>=50))
t.max = max(which(n>=50))
Age = Age[t.min:t.max]
print(Age)
n = rep(NA,t.T)
for(t in 1:t.T) n[t] = length(Age.Alignment[[t]])
t.min = min(which(n>=10))
t.max = max(which(n>=10))
Age = Age[t.min:t.max]
print(Age)
t.T = length(t.min:t.max)
#First get all of the relevant players active in 2005.
#Check the alignment to make sure that all is proper.
rm(list=ls())
load("~/DGLM/Data/AgeAlignment2005.RData")
load("~/DGLM/Data/Raw_Data.RData")
library(ggplot2)
t.T = length(Age.Alignment)
Age = 18+(1:t.T)
K = 15
B = 0
N.MC = 10
sigma2 = diag(W)
n = rep(NA,t.T)
for(t in 1:t.T) n[t] = length(Age.Alignment[[t]])
t.min = min(which(n>=10))
t.max = max(which(n>=10))
Age = Age[t.min:t.max]
print(Age)
t.T = length(t.min:t.max)
print(t.T)
y = N = list()
for(t in 1:(t.T+1)){
tt = t.min + t-1
y[[t]] = sapply(1:n[tt], function(i) Age.Alignment[[tt]][[i]]$Response$HR )
N[[t]] = sapply(1:n[tt], function(i) Age.Alignment[[tt]][[i]]$Response$AB )
names(y[[t]]) = names(N[[t]]) = names(Age.Alignment[[tt]])
}
n = n[t.min:t.max]
Data = read.csv("~/Dropbox/Baseball/Lahman/DLM_data.csv", header=T,stringsAsFactor=F)
#So the age alignment is correct.
players2005 = Data$playerID[Data$yearID==2005 & Data$AB>40 ]
players2006 = Data$playerID[Data$yearID==2006 & Data$AB>40 ]
library(xlsx)
Jensen_118 = read.xlsx("~/Dropbox/Baseball/Lahman/Jensen_118.xlsx", sheetIndex=1)
Jensen_118 = as.character(Jensen_118[,1])
Jensen05 = intersect(players2005,Jensen_118)
Jensen06 = intersect(players2006,Jensen_118)
print(paste("Jensen Overlap 2005= ", length(Jensen05), sep=""))
print(paste("Jensen Overlap 2006= ", length(Jensen06), sep=""))
players = intersect(players2005, players2006)
players = c(players, "baldero01")
nPlayers = length(players)
Players.0506 = data.frame(players, Age.05 = rep(NA, nPlayers), HR.05 = rep(NA, nPlayers), HR.06 = rep(NA, nPlayers), AB.06 = rep(NA,nPlayers), HR.hat = rep(NA,nPlayers),HR.hat.025 = rep(NA,nPlayers) ,HR.hat.975 = rep(NA,nPlayers) )
for(i in 1:nPlayers){
Players.0506[i,2] = Data$Age[Data$playerID==players[i] & Data$yearID==2005][1]
Players.0506[i,3] = Data$HR[Data$playerID==players[i] & Data$yearID==2005][1]
Players.0506[i,4] = Data$HR[Data$playerID==players[i] & Data$yearID==2006][1]
Players.0506[i,5] = Data$AB[Data$playerID==players[i] & Data$yearID==2006][1]
}
init = 111
thetaNames = read.csv(paste("~/DGLM/Reproducibility/Init_",init,"/Theta_colnames.csv",sep=""), header=F, stringsAsFactors=F)
theta = read.csv(paste("~/DGLM/Reproducibility/Init_",init,"/Theta.csv",sep=""), header=F, stringsAsFactors=F)
THETA = THETA_forecast = list()
print(t.T)
print(N.MC)
for(j in 1:(K+1)){
THETA[[j]] = theta[theta[,1]==j,]
THETA[[j]] = THETA[[j]][,-1]
colnames(THETA[[j]]) = Age
THETA_forecast[[j]] = THETA[[j]] + matrix( rnorm(N.MC*t.T, 0, sqrt(sigma2[j]) ), nrow = N.MC, ncol = t.T)
}
Player_Year_05 = AB_06 = gamma_05 = gamma_06_forecast = zeta_05 = zeta_06_forecast = Y_06 = Y_06_forecast = Y.hat = list()
N = RMSE.06 = rep(NA,t.T)
for(t in 1:t.T){
Player_Year_05[[t]] = Players.0506[Players.0506[,2]==Age[t],1]
if(length(Player_Year_05[[t]]) == 0) next
AB_06[[t]] = Players.0506[Players.0506[,2]==Age[t],5]
Y_06[[t]] = Players.0506[Players.0506[,2]==Age[t],4]
N[t] = length(Player_Year_05[[t]])
Y.hat[[t]] = matrix(nrow = 3, ncol = N[t])
colnames(Y.hat[[t]]) = as.character(Player_Year_05[[t]])
gamma_06_forecast[[t]] = zeta_06_forecast[[t]] = Y_06_forecast[[t]] = matrix(nrow = N.MC, ncol = N[t])
Names = read.csv(paste("~/DGLM/Reproducibility/Init_",init,"/Gamma_",t,"_colnames.csv",sep=""),header=F, stringsAsFactors=F)
gamma = read.csv(paste("~/DGLM/Reproducibility/Init_",init,"/Gamma_",t,".csv",sep=""), header=F, stringsAsFactors=F)
zeta = read.csv(paste("~/DGLM/Reproducibility/Init_",init,"/Zeta_",t,".csv",sep=""), header=F, stringsAsFactors=F)
Names = Names[,-1]
gamma = gamma[,-1]
zeta = zeta[,-1]
gamma = gamma[(B+1):N.MC,]
zeta = zeta[(B+1):N.MC,]
colnames(gamma) = Names
colnames(zeta) = Names
index = intersect(as.character(Player_Year_05[[t]]), names(gamma))
gamma_05[[t]] = gamma[, index ]
zeta_05[[t]] = zeta[, index ]
gamma_05[[t]] = zeta_05[[t]] = matrix(nrow = N.MC, ncol = N[t])
colnames(gamma_05[[t]]) = names(zeta_05[[t]]) = as.character(Player_Year_05[[t]])
for(i in 1:N[t]){
if(!is.element(as.character(Player_Year_05[[t]][i]),names(gamma) ) ){
next
}else{
gamma_05[[t]][,i] = gamma[,as.character(Player_Year_05[[t]][i])]
zeta_05[[t]][,i] = zeta[, as.character(Player_Year_05[[t]][i]) ]
for(j in 1:N.MC){
g.06 = sample(1:K, size=1, prob = Q.gamma[[t]][gamma_05[[t]][j,i],] )
z.06 = sample(0:1, size=1, prob = Q.zeta[(zeta_05[[t]][j,i]+1),] )
gamma_06_forecast[[t]][j,i] = g.06
zeta_06_forecast[[t]][j,i] = z.06
eta.06 = THETA_forecast[[g.06]][j,t] + z.06*THETA_forecast[[K+1]][j,t]
mu.06 = 1/(1+exp(-eta.06))
Y_06_forecast[[t]][j,i] = rbinom(1, AB_06[[t]][i], mu.06)
}
Y.hat[[t]][1,i] = mean(Y_06_forecast[[t]][,i])
Y.hat[[t]][2:3,i] = quantile(Y_06_forecast[[t]][,i], c(.025, .975))
Players.0506[Players.0506[,1]== Player_Year_05[[t]][i] ,6:8] = Y.hat[[t]][,i]
}
}
RMSE.06[t] = sqrt( mean( (Y.hat[[t]][1,] - Y_06[[t]])^2, na.rm=T ) )
}
library(xlsx)
Jensen_118 = read.xlsx("~/Dropbox/Baseball/Lahman/Jensen_118.xlsx", sheetIndex=1)
Jensen_118 = as.character(Jensen_118[,1])
Jensen = intersect(players, Jensen_118)
print(paste("Jensen Overlap= ", length(Jensen), sep=""))
rownames(Players.0506) = Players.0506[,1]
Jensen.Players = Players.0506[Jensen,]
Jensen.Players
#gz.bonds = sample(1:(2*K), 1000, replace=T, prob = PI.G_Z.0[20,] )
gz.baldelli = sample(1:(2*K),1000,replace=T,prob = PI.G_Z.0[5,])
y.baldelli = y.bonds = rep(NA,1000)
#AB.Bonds = Jensen.Players["bondsba01",5]
AB.Baldelli = Jensen.Players["baldero01",5]
for(i in 1:1000){
#if(gz.bonds[i]<=K){
#  gamma.bonds = gz.bonds[i]
#  zeta.bonds = 0
#}else{
#  gamma.bonds = gz.bonds[i] - K
#  zeta.bonds = 1
#}
if(gz.baldelli[i]<=K){
gamma.baldelli = gz.baldelli[i]
zeta.baldelli = 0
}else{
gamma.baldelli = gz.baldelli[i] - K
zeta.baldelli = 1
}
theta = rnorm((K+1),m0, sqrt(sigma2) )
#eta.bonds = theta[gamma.bonds] + zeta.bonds*theta[K+1]
eta.baldelli = theta[gamma.baldelli] + zeta.baldelli*theta[K+1]
#mu.bonds = 1/(1+exp(-eta.bonds))
mu.baldelli = 1/(1+exp(-eta.baldelli))
#y.bonds[i] = rbinom(1,AB.Bonds,mu.bonds)
y.baldelli[i] = rbinom(1,AB.Baldelli, mu.baldelli)
}
Jensen.Players["baldero01","HR.hat"] = mean(y.baldelli)
Jensen.Players["baldero01","HR.hat.025"] = quantile(y.baldelli,prob=.025)
Jensen.Players["baldero01","HR.hat.975"] = quantile(y.baldelli,prob=.9755)
Jensen.Players
RMSE.Jensen = sqrt( mean( (Jensen.Players$HR.06 - Jensen.Players$HR.hat)^2 ) )
plot( Jensen.Players[,HR.hat] - Jensen.Players[,"HR.06"] )
plot( Jensen.Players[,"HR.hat"] - Jensen.Players[,"HR.06"] )
1.6*60
#First get all of the relevant players active in 2005.
#Check the alignment to make sure that all is proper.
rm(list=ls())
load("~/DGLM/Data/AgeAlignment2005.RData")
load("~/DGLM/Data/Raw_Data.RData")
library(ggplot2)
t.T = length(Age.Alignment)
Age = 18+(1:t.T)
K = 15
B = 0
N.MC = 1000
sigma2 = diag(W)
n = rep(NA,t.T)
for(t in 1:t.T) n[t] = length(Age.Alignment[[t]])
t.min = min(which(n>=10))
t.max = max(which(n>=10))
Age = Age[t.min:t.max]
print(Age)
t.T = length(t.min:t.max)
print(t.T)
y = N = list()
for(t in 1:(t.T+1)){
tt = t.min + t-1
y[[t]] = sapply(1:n[tt], function(i) Age.Alignment[[tt]][[i]]$Response$HR )
N[[t]] = sapply(1:n[tt], function(i) Age.Alignment[[tt]][[i]]$Response$AB )
names(y[[t]]) = names(N[[t]]) = names(Age.Alignment[[tt]])
}
n = n[t.min:t.max]
Data = read.csv("~/Dropbox/Baseball/Lahman/DLM_data.csv", header=T,stringsAsFactor=F)
#So the age alignment is correct.
#How do I identify player ages in 2006
players2005 = Data$playerID[Data$yearID==2005 & Data$AB>40 ]
players2006 = Data$playerID[Data$yearID==2006 & Data$AB>40 ]
library(xlsx)
Jensen_118 = read.xlsx("~/Dropbox/Baseball/Lahman/Jensen_118.xlsx", sheetIndex=1)
Jensen_118 = as.character(Jensen_118[,1])
Jensen05 = intersect(players2005,Jensen_118)
Jensen06 = intersect(players2006,Jensen_118)
print(paste("Jensen Overlap 2005= ", length(Jensen05), sep=""))
print(paste("Jensen Overlap 2006= ", length(Jensen06), sep=""))
players = intersect(players2005, players2006)
players = c(players, "baldero01")
nPlayers = length(players)
Players.0506 = data.frame(players, Age.05 = rep(NA, nPlayers), HR.05 = rep(NA, nPlayers), HR.06 = rep(NA, nPlayers), AB.06 = rep(NA,nPlayers), HR.hat = rep(NA,nPlayers),HR.hat.025 = rep(NA,nPlayers) ,HR.hat.975 = rep(NA,nPlayers) )
for(i in 1:nPlayers){
Players.0506[i,2] = Data$Age[Data$playerID==players[i] & Data$yearID==2005][1]
Players.0506[i,3] = Data$HR[Data$playerID==players[i] & Data$yearID==2005][1]
Players.0506[i,4] = Data$HR[Data$playerID==players[i] & Data$yearID==2006][1]
Players.0506[i,5] = Data$AB[Data$playerID==players[i] & Data$yearID==2006][1]
}
init = 111
thetaNames = read.csv(paste("~/DGLM/Reproducibility/Init_",init,"/Theta_colnames.csv",sep=""), header=F, stringsAsFactors=F)
theta = read.csv(paste("~/DGLM/Reproducibility/Init_",init,"/Theta.csv",sep=""), header=F, stringsAsFactors=F)
THETA = THETA_forecast = list()
print(t.T)
print(N.MC)
for(j in 1:(K+1)){
THETA[[j]] = theta[theta[,1]==j,]
THETA[[j]] = THETA[[j]][,-1]
colnames(THETA[[j]]) = Age
THETA_forecast[[j]] = THETA[[j]] + matrix( rnorm(N.MC*t.T, 0, sqrt(sigma2[j]) ), nrow = N.MC, ncol = t.T)
}
Player_Year_05 = AB_06 = gamma_05 = gamma_06_forecast = zeta_05 = zeta_06_forecast = Y_06 = Y_06_forecast = Y.hat = list()
N = RMSE.06 = rep(NA,t.T)
for(t in 1:t.T){
Player_Year_05[[t]] = Players.0506[Players.0506[,2]==Age[t],1]
if(length(Player_Year_05[[t]]) == 0) next
AB_06[[t]] = Players.0506[Players.0506[,2]==Age[t],5]
Y_06[[t]] = Players.0506[Players.0506[,2]==Age[t],4]
N[t] = length(Player_Year_05[[t]])
Y.hat[[t]] = matrix(nrow = 3, ncol = N[t])
colnames(Y.hat[[t]]) = as.character(Player_Year_05[[t]])
gamma_06_forecast[[t]] = zeta_06_forecast[[t]] = Y_06_forecast[[t]] = matrix(nrow = N.MC, ncol = N[t])
Names = read.csv(paste("~/DGLM/Reproducibility/Init_",init,"/Gamma_",t,"_colnames.csv",sep=""),header=F, stringsAsFactors=F)
gamma = read.csv(paste("~/DGLM/Reproducibility/Init_",init,"/Gamma_",t,".csv",sep=""), header=F, stringsAsFactors=F)
zeta = read.csv(paste("~/DGLM/Reproducibility/Init_",init,"/Zeta_",t,".csv",sep=""), header=F, stringsAsFactors=F)
Names = Names[,-1]
gamma = gamma[,-1]
zeta = zeta[,-1]
gamma = gamma[(B+1):N.MC,]
zeta = zeta[(B+1):N.MC,]
colnames(gamma) = Names
colnames(zeta) = Names
index = intersect(as.character(Player_Year_05[[t]]), names(gamma))
gamma_05[[t]] = gamma[, index ]
zeta_05[[t]] = zeta[, index ]
gamma_05[[t]] = zeta_05[[t]] = matrix(nrow = N.MC, ncol = N[t])
colnames(gamma_05[[t]]) = names(zeta_05[[t]]) = as.character(Player_Year_05[[t]])
for(i in 1:N[t]){
if(!is.element(as.character(Player_Year_05[[t]][i]),names(gamma) ) ){
next
}else{
gamma_05[[t]][,i] = gamma[,as.character(Player_Year_05[[t]][i])]
zeta_05[[t]][,i] = zeta[, as.character(Player_Year_05[[t]][i]) ]
for(j in 1:N.MC){
g.06 = sample(1:K, size=1, prob = Q.gamma[[t]][gamma_05[[t]][j,i],] )
z.06 = sample(0:1, size=1, prob = Q.zeta[(zeta_05[[t]][j,i]+1),] )
gamma_06_forecast[[t]][j,i] = g.06
zeta_06_forecast[[t]][j,i] = z.06
eta.06 = THETA_forecast[[g.06]][j,t] + z.06*THETA_forecast[[K+1]][j,t]
mu.06 = 1/(1+exp(-eta.06))
Y_06_forecast[[t]][j,i] = rbinom(1, AB_06[[t]][i], mu.06)
}
Y.hat[[t]][1,i] = mean(Y_06_forecast[[t]][,i])
Y.hat[[t]][2:3,i] = quantile(Y_06_forecast[[t]][,i], c(.025, .975))
Players.0506[Players.0506[,1]== Player_Year_05[[t]][i] ,6:8] = Y.hat[[t]][,i]
}
}
RMSE.06[t] = sqrt( mean( (Y.hat[[t]][1,] - Y_06[[t]])^2, na.rm=T ) )
}
RMSE = sqrt( mean( (Players.0506$HR.06 - Players.0506$HR.hat)^2, na.rm=T ) )
library(xlsx)
Jensen_118 = read.xlsx("~/Dropbox/Baseball/Lahman/Jensen_118.xlsx", sheetIndex=1)
Jensen_118 = as.character(Jensen_118[,1])
Jensen = intersect(players, Jensen_118)
print(paste("Jensen Overlap= ", length(Jensen), sep=""))
rownames(Players.0506) = Players.0506[,1]
Jensen.Players = Players.0506[Jensen,]
Jensen.Players
#gz.bonds = sample(1:(2*K), 1000, replace=T, prob = PI.G_Z.0[20,] )
gz.baldelli = sample(1:(2*K),1000,replace=T,prob = PI.G_Z.0[5,])
y.baldelli = y.bonds = rep(NA,1000)
#AB.Bonds = Jensen.Players["bondsba01",5]
AB.Baldelli = Jensen.Players["baldero01",5]
for(i in 1:1000){
#if(gz.bonds[i]<=K){
#  gamma.bonds = gz.bonds[i]
#  zeta.bonds = 0
#}else{
#  gamma.bonds = gz.bonds[i] - K
#  zeta.bonds = 1
#}
if(gz.baldelli[i]<=K){
gamma.baldelli = gz.baldelli[i]
zeta.baldelli = 0
}else{
gamma.baldelli = gz.baldelli[i] - K
zeta.baldelli = 1
}
theta = rnorm((K+1),m0, sqrt(sigma2) )
#eta.bonds = theta[gamma.bonds] + zeta.bonds*theta[K+1]
eta.baldelli = theta[gamma.baldelli] + zeta.baldelli*theta[K+1]
#mu.bonds = 1/(1+exp(-eta.bonds))
mu.baldelli = 1/(1+exp(-eta.baldelli))
#y.bonds[i] = rbinom(1,AB.Bonds,mu.bonds)
y.baldelli[i] = rbinom(1,AB.Baldelli, mu.baldelli)
}
#Jensen.Players["bondsba01","HR.hat"] = mean(y.bonds)
#Jensen.Players["bondsba01","HR.hat.025"] = quantile(y.bonds,prob=.025)
#Jensen.Players["bondsba01","HR.hat.975"] = quantile(y.bonds,prob=.9755)
Jensen.Players["baldero01","HR.hat"] = mean(y.baldelli)
Jensen.Players["baldero01","HR.hat.025"] = quantile(y.baldelli,prob=.025)
Jensen.Players["baldero01","HR.hat.975"] = quantile(y.baldelli,prob=.9755)
RMSE.Jensen = sqrt( mean( (Jensen.Players$HR.06 - Jensen.Players$HR.hat)^2 ) )
plot( Jensen.Players[,"HR.hat"] - Jensen.Players[,"HR.06"] )
df = data.frame(Age, RMSE = RMSE.06)
pdf("~/Dropbox/GT_2015/Figures/Prediction_Age.pdf")
ggplot(df, aes(Age,RMSE)) + geom_line() + xlab("Age")+
ylab("RMSE") +
theme(axis.text=element_text(size=10, color="black"),axis.title=element_text(size=24,face="bold"), legend.text=element_text(size=20))
dev.off()
ggplot(df, aes(Age,RMSE)) + geom_line() + xlab("Age")+
ylab("RMSE") +
theme(axis.text=element_text(size=10, color="black"),axis.title=element_text(size=24,face="bold"), legend.text=element_text(size=20))
df = data.frame(Age, RMSE = RMSE.06)
ggplot(df, aes(Age,RMSE)) + geom_line() + xlab("Age")+
ylab("RMSE") +
theme(axis.text=element_text(size=10, color="black"),axis.title=element_text(size=24,face="bold"), legend.text=element_text(size=20))
Age
RMSE.06
lm(RMSE.06~Age)
RMSE
RMSE.Jensen
mean(abs(Jensen.Players$HR.06 - Jensen.Players$HR.hat) )
Jensen.Players
RMSE.strawman = sqrt( mean( (Jensen.Players$HR.06 - Jensen.Players$HR.05)^2, na.rm =T ) )
7.73/7.33
strawman = sqrt( mean( (Players.0506$HR.06 - Players.0506$HR.05)^2, na.rm =T ) )
RMSE.strawman
lm(RMSE.06~Age)
summary(lm(RMSE.06~Age))
df = data.frame(Age, RMSE = RMSE.06)
pdf("~/Dropbox/GT_2015/Figures/Prediction_Age.pdf")
ggplot(df, aes(Age,RMSE)) + geom_line() + xlab("Age")+
ylab("RMSE") +
theme(axis.text=element_text(size=10, color="black"),axis.title=element_text(size=24,face="bold"), legend.text=element_text(size=20))
dev.off()
strawman
